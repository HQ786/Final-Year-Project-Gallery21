"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/user/[id]/posts/route";
exports.ids = ["app/api/user/[id]/posts/route"];
exports.modules = {

/***/ "mongoose":
/*!***************************!*\
  !*** external "mongoose" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("mongoose");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute&page=%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute.js&appDir=%2FVolumes%2FMySecureSphere%2FFYP%20Code%2Fgallery21-main%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FMySecureSphere%2FFYP%20Code%2Fgallery21-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute&page=%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute.js&appDir=%2FVolumes%2FMySecureSphere%2FFYP%20Code%2Fgallery21-main%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FMySecureSphere%2FFYP%20Code%2Fgallery21-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Volumes_MySecureSphere_FYP_Code_gallery21_main_app_api_user_id_posts_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/user/[id]/posts/route.js */ \"(rsc)/./app/api/user/[id]/posts/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/user/[id]/posts/route\",\n        pathname: \"/api/user/[id]/posts\",\n        filename: \"route\",\n        bundlePath: \"app/api/user/[id]/posts/route\"\n    },\n    resolvedPagePath: \"/Volumes/MySecureSphere/FYP Code/gallery21-main/app/api/user/[id]/posts/route.js\",\n    nextConfigOutput,\n    userland: _Volumes_MySecureSphere_FYP_Code_gallery21_main_app_api_user_id_posts_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/user/[id]/posts/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ1c2VyJTJGJTVCaWQlNUQlMkZwb3N0cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdXNlciUyRiU1QmlkJTVEJTJGcG9zdHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ1c2VyJTJGJTVCaWQlNUQlMkZwb3N0cyUyRnJvdXRlLmpzJmFwcERpcj0lMkZWb2x1bWVzJTJGTXlTZWN1cmVTcGhlcmUlMkZGWVAlMjBDb2RlJTJGZ2FsbGVyeTIxLW1haW4lMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlZvbHVtZXMlMkZNeVNlY3VyZVNwaGVyZSUyRkZZUCUyMENvZGUlMkZnYWxsZXJ5MjEtbWFpbiZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDZ0M7QUFDN0c7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nYWxsZXJ5MjEtd2ViLWFwcC0yLjAvP2E5NDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1ZvbHVtZXMvTXlTZWN1cmVTcGhlcmUvRllQIENvZGUvZ2FsbGVyeTIxLW1haW4vYXBwL2FwaS91c2VyL1tpZF0vcG9zdHMvcm91dGUuanNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3VzZXIvW2lkXS9wb3N0cy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3VzZXIvW2lkXS9wb3N0c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdXNlci9baWRdL3Bvc3RzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1ZvbHVtZXMvTXlTZWN1cmVTcGhlcmUvRllQIENvZGUvZ2FsbGVyeTIxLW1haW4vYXBwL2FwaS91c2VyL1tpZF0vcG9zdHMvcm91dGUuanNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3VzZXIvW2lkXS9wb3N0cy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute&page=%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute.js&appDir=%2FVolumes%2FMySecureSphere%2FFYP%20Code%2Fgallery21-main%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FMySecureSphere%2FFYP%20Code%2Fgallery21-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/user/[id]/posts/route.js":
/*!******************************************!*\
  !*** ./app/api/user/[id]/posts/route.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PATCH: () => (/* binding */ PATCH),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _models_Post__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @models/Post */ \"(rsc)/./models/Post.js\");\n/* harmony import */ var _utils_database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @utils/database */ \"(rsc)/./utils/database.js\");\n/* harmony import */ var _utils_cloudinary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @utils/cloudinary */ \"(rsc)/./utils/cloudinary.js\");\n/* harmony import */ var cloudinary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cloudinary */ \"(rsc)/./node_modules/cloudinary/cloudinary.js\");\n/* harmony import */ var cloudinary__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(cloudinary__WEBPACK_IMPORTED_MODULE_4__);\n// app/api/users/[id]/posts/route.js\n\n\n\n\n\n// GET method: Fetch posts for a user and check if they are liked by the user\nconst GET = async (request, { params })=>{\n    const { id: userId } = params;\n    try {\n        await (0,_utils_database__WEBPACK_IMPORTED_MODULE_2__.connectToDB)();\n        const posts = await _models_Post__WEBPACK_IMPORTED_MODULE_1__[\"default\"].aggregate([\n            {\n                $match: {\n                    userId: new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Types).ObjectId(userId)\n                }\n            },\n            {\n                $sort: {\n                    createdAt: -1\n                }\n            },\n            {\n                $lookup: {\n                    from: \"likes\",\n                    let: {\n                        postId: \"$_id\"\n                    },\n                    pipeline: [\n                        {\n                            $match: {\n                                $expr: {\n                                    $and: [\n                                        {\n                                            $eq: [\n                                                \"$postId\",\n                                                \"$$postId\"\n                                            ]\n                                        },\n                                        {\n                                            $eq: [\n                                                \"$userId\",\n                                                new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Types).ObjectId(userId)\n                                            ]\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ],\n                    as: \"userLikeStatus\"\n                }\n            },\n            {\n                $addFields: {\n                    isLikedByUser: {\n                        $cond: {\n                            if: {\n                                $gt: [\n                                    {\n                                        $size: \"$userLikeStatus\"\n                                    },\n                                    0\n                                ]\n                            },\n                            then: true,\n                            else: false\n                        }\n                    }\n                }\n            },\n            {\n                $project: {\n                    userLikeStatus: 0\n                }\n            }\n        ]);\n        return new Response(JSON.stringify(posts), {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n        return new Response(JSON.stringify({\n            message: \"Failed to fetch posts\",\n            error: error.message\n        }), {\n            status: 500\n        });\n    }\n};\nconst handleImageUploads = async (objectAray, folder, postType)=>{\n    if (postType === \"art\") {\n        return await Promise.all(objectAray.map(async (object)=>{\n            let result;\n            console.log(typeof object.src, object.src);\n            if (typeof object.src === \"string\" && object.src.includes(\"res.cloudinary.com\")) {\n                result = object.src;\n            } else {\n                const bytes = await object.src.arrayBuffer();\n                const buffer = Buffer.from(bytes);\n                result = await (0,_utils_cloudinary__WEBPACK_IMPORTED_MODULE_3__.uploadToCloudinary)(buffer, {\n                    folder,\n                    publicId: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n                });\n                result = result.secure_url;\n            }\n            return {\n                src: result,\n                description: object.description\n            }; // Use file name as description\n        }));\n    } else {\n        return await Promise.all(objectAray.map(async (object)=>{\n            let result;\n            console.log(typeof object, object);\n            if (typeof object === \"string\" && object.includes(\"res.cloudinary.com\")) {\n                result = object;\n            } else {\n                const bytes = await object.arrayBuffer();\n                const buffer = Buffer.from(bytes);\n                result = await (0,_utils_cloudinary__WEBPACK_IMPORTED_MODULE_3__.uploadToCloudinary)(buffer, {\n                    folder,\n                    publicId: `${Date.now()}`\n                });\n                result = result.secure_url;\n            }\n            return result; // Use file name as description\n        }));\n    }\n};\n// POST method: Create a new post\nconst POST = async (request, { params })=>{\n    const { id } = params; // Get user ID from route parameters\n    const formData = await request.formData(); // Parse FormData from request\n    const title = formData.get(\"title\");\n    const content = formData.get(\"content\");\n    const postType = formData.get(\"postType\");\n    try {\n        await (0,_utils_database__WEBPACK_IMPORTED_MODULE_2__.connectToDB)();\n        let uploadedImages = [];\n        const Gifs = [];\n        if (postType === \"art\") {\n            const images = [];\n            for (const [key, value] of formData.entries()){\n                const match = key.match(/images\\[(\\d+)\\]\\[(.+)\\]/);\n                if (match) {\n                    const [, index, src] = match;\n                    if (!images[index]) images[index] = {};\n                    images[index][src] = value;\n                }\n            }\n            uploadedImages = await handleImageUploads(images, \"posts/art\", \"art\");\n        }\n        if (postType === \"community\") {\n            const images = [];\n            for (const [key, value] of formData.entries()){\n                const match = key.match(/communityImages\\[(\\d+)\\]/);\n                if (match) {\n                    const [, index] = match;\n                    images[index] = value;\n                }\n            }\n            // Call `handleImageUploads` after the loop\n            uploadedImages = await handleImageUploads(images, \"posts/community\", \"community\");\n            for (const [key, value] of formData.entries()){\n                const match = key.match(/Gifs\\[(\\d+)\\]/);\n                if (match) {\n                    const [, index] = match;\n                    Gifs[index] = value;\n                    console.log(value);\n                }\n            }\n        }\n        console.log(\"uploadedImages\", uploadedImages);\n        // Create the new post object\n        const newPost = new _models_Post__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            title,\n            content,\n            userId: id,\n            postType,\n            images: postType === \"art\" ? uploadedImages : undefined,\n            communityImages: postType === \"community\" ? uploadedImages : undefined,\n            createdAt: new Date(),\n            gifs: postType === \"community\" ? Gifs : undefined\n        });\n        // // Save the post to the database\n        await newPost.save();\n        return new Response(JSON.stringify(newPost), {\n            status: 201\n        });\n    } catch (error) {\n        console.error(\"Error creating post:\", error);\n        return new Response(JSON.stringify({\n            message: \"Failed to create post\"\n        }), {\n            status: 500\n        });\n    }\n};\nconst deleteOldPostImages = async (images, postType)=>{\n    // Extract public IDs from the image URLs\n    let publicIds;\n    if (postType === \"art\") {\n        publicIds = images.map((image)=>{\n            console.log(\"image.src\", image.src);\n            const urlParts = image.src.split(\"/\"); // Split the URL by '/'\n            const folderPath = urlParts.slice(-3, -1).join(\"/\"); // Get the last 2 folder parts (adjust based on your folder depth)\n            const publicIdWithExtension = urlParts[urlParts.length - 1]; // Get the last part (filename with extension)\n            const publicId = publicIdWithExtension.split(\".\")[0]; // Remove the file extension\n            return `${folderPath}/${publicId}`; // Combine folder path and public ID\n        });\n    } else {\n        publicIds = images.map((image)=>{\n            console.log(image);\n            const urlParts = image.split(\"/\");\n            const folderPath = urlParts.slice(-3, -1).join(\"/\");\n            const publicIdWithExtension = urlParts[urlParts.length - 1];\n            const publicId = publicIdWithExtension.split(\".\")[0];\n            return `${folderPath}/${publicId}`;\n        });\n    }\n    console.log(\"publicIds\", publicIds);\n    // Delete images from Cloudinary\n    const deletePromises = publicIds.map(async (publicId)=>{\n        try {\n            const result = await cloudinary__WEBPACK_IMPORTED_MODULE_4___default().uploader.destroy(publicId, {\n                invalidate: true\n            });\n            console.log(`Deletion result for ${publicId}:`, result);\n            return result;\n        } catch (error) {\n            console.error(`Failed to delete ${publicId}:`, error);\n            throw error;\n        }\n    });\n    // Wait for all deletions to complete\n    await Promise.all(deletePromises);\n};\n// PATCH method: Update an existing post\nconst PATCH = async (request, { params })=>{\n    const { id } = params; // Presumably the user ID\n    const formData = await request.formData(); // Parse FormData from request\n    const postId = formData.get(\"postId\");\n    const title = formData.get(\"title\");\n    const content = formData.get(\"content\");\n    const postType = formData.get(\"postType\");\n    try {\n        await (0,_utils_database__WEBPACK_IMPORTED_MODULE_2__.connectToDB)();\n        // Find the post by ID to check existence\n        const post = await _models_Post__WEBPACK_IMPORTED_MODULE_1__[\"default\"].findById(postId);\n        if (!post) {\n            return new Response(JSON.stringify({\n                message: \"Post not found\"\n            }), {\n                status: 404\n            });\n        }\n        let uploadedImages = [];\n        const Gifs = [];\n        if (postType === \"art\") {\n            const images = []; // Initialize images array\n            // Populate the `images` array from formData\n            for (const [key, value] of formData.entries()){\n                const match = key.match(/images\\[(\\d+)\\]\\[(.+)\\]/);\n                if (match) {\n                    const [, index, src] = match;\n                    if (!images[index]) images[index] = {};\n                    images[index][src] = value; // No need for `src === 'file'` check, just assign\n                }\n            }\n            uploadedImages = await handleImageUploads(images, \"posts/art\", \"art\");\n            if (post.images.length > 0) deleteOldPostImages(post.images, \"art\");\n        }\n        if (postType === \"community\") {\n            const images = [];\n            for (const [key, value] of formData.entries()){\n                const match = key.match(/communityImages\\[(\\d+)\\]/);\n                if (match) {\n                    const [, index] = match;\n                    images[index] = value;\n                }\n            }\n            // Call `handleImageUploads` after the loop\n            uploadedImages = await handleImageUploads(images, \"posts/community\", \"community\");\n            if (post.communityImages.length > 0) deleteOldPostImages(post.communityImages, \"community\");\n            for (const [key, value] of formData.entries()){\n                const match = key.match(/Gifs\\[(\\d+)\\]/);\n                if (match) {\n                    const [, index] = match;\n                    Gifs[index] = value;\n                }\n            }\n            console.log(Gifs);\n        }\n        // Build the updatedData object\n        const updatedData = {\n            content,\n            postType,\n            ...postType === \"art\" && {\n                title,\n                images: uploadedImages\n            },\n            ...postType === \"community\" && {\n                communityImages: uploadedImages,\n                gifs: Gifs\n            },\n            lastUpdated: new Date()\n        };\n        console.log(updatedData);\n        // Update the post\n        const updatedPost = await _models_Post__WEBPACK_IMPORTED_MODULE_1__[\"default\"].findByIdAndUpdate(postId, {\n            $set: updatedData\n        }, {\n            new: true,\n            runValidators: true,\n            strict: false\n        });\n        return new Response(JSON.stringify(updatedPost), {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Error updating post:\", error);\n        return new Response(JSON.stringify({\n            message: \"Failed to update post\"\n        }), {\n            status: 500\n        });\n    }\n};\n// DELETE method: Delete a post\nconst DELETE = async (request, { params })=>{\n    const { postID } = await request.json(); // Parse request body\n    console.log(postID);\n    try {\n        await (0,_utils_database__WEBPACK_IMPORTED_MODULE_2__.connectToDB)();\n        // Find the post and delete it\n        const post = await _models_Post__WEBPACK_IMPORTED_MODULE_1__[\"default\"].findById(postID);\n        if (!post) {\n            return new Response(JSON.stringify({\n                message: \"Post not found\"\n            }), {\n                status: 404\n            });\n        }\n        if (post.postType === \"art\") {\n            if (post.images.length > 0) deleteOldPostImages(post.images, \"art\");\n        } else {\n            if (post.communityImages.length > 0) {\n                deleteOldPostImages(post.communityImages, \"community\");\n            }\n        }\n        const deletedPost = await _models_Post__WEBPACK_IMPORTED_MODULE_1__[\"default\"].findByIdAndDelete(postID);\n        return new Response(JSON.stringify(deletedPost), {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Error deleting post:\", error);\n        return new Response(JSON.stringify({\n            message: \"Failed to delete post\"\n        }), {\n            status: 500\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/user/[id]/posts/route.js\n");

/***/ }),

/***/ "(rsc)/./models/Post.js":
/*!************************!*\
  !*** ./models/Post.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n// models/Post.js\n\nconst ImageDescriptionSchema = new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema)({\n    src: {\n        type: String,\n        required: true\n    },\n    description: {\n        type: String,\n        default: \"\"\n    }\n});\nconst PostSchema = new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema)({\n    title: {\n        type: String,\n        validate: {\n            validator: function() {\n                return this.postType !== \"art\" || this.title && this.title.length > 0;\n            },\n            message: \"Title is required for art posts.\"\n        },\n        trim: true\n    },\n    content: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    userId: {\n        type: (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema).Types.ObjectId,\n        ref: \"User\",\n        required: true\n    },\n    images: {\n        type: [\n            ImageDescriptionSchema\n        ],\n        validate: {\n            validator: function() {\n                return this.postType !== \"art\" || this.images && this.images.length > 0 && this.images.length <= 6;\n            },\n            message: \"Images are required for art posts and can not exceed 6 images.\"\n        }\n    },\n    communityImages: {\n        type: [\n            String\n        ],\n        default: [],\n        validate: {\n            validator: function(value) {\n                return this.postType !== \"community\" || value.length <= 4 // Allow empty array or up to 4 images\n                ;\n            },\n            message: \"If community images are provided, they cannot exceed 4 images.\"\n        }\n    },\n    gifs: {\n        type: [\n            String\n        ],\n        default: [],\n        validate: {\n            validator: function(value) {\n                return this.postType !== \"community\" || value.length <= 3;\n            },\n            message: \"If community GIFs are provided, they cannot exceed 3 GIFs.\"\n        }\n    },\n    likes: {\n        type: Number,\n        default: 0\n    },\n    postType: {\n        type: String,\n        enum: [\n            \"art\",\n            \"community\"\n        ],\n        required: true\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now\n    },\n    lastUpdated: {\n        type: Date,\n        default: null\n    },\n    flags: [\n        {\n            userId: (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema).Types.ObjectId,\n            reason: String,\n            flaggedAt: {\n                type: Date,\n                default: Date.now\n            }\n        }\n    ],\n    isPinned: {\n        type: Boolean,\n        default: false\n    }\n});\n// Create the Post model\nconst Post = (mongoose__WEBPACK_IMPORTED_MODULE_0___default().models).Post || mongoose__WEBPACK_IMPORTED_MODULE_0___default().model(\"Post\", PostSchema);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Post);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9tb2RlbHMvUG9zdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxpQkFBaUI7QUFFZTtBQUVoQyxNQUFNQyx5QkFBeUIsSUFBSUQsd0RBQWUsQ0FBQztJQUNqREcsS0FBSztRQUNIQyxNQUFNQztRQUNOQyxVQUFVO0lBQ1o7SUFDQUMsYUFBYTtRQUNYSCxNQUFNQztRQUNORyxTQUFTO0lBQ1g7QUFDRjtBQUVBLE1BQU1DLGFBQWEsSUFBSVQsd0RBQWUsQ0FBQztJQUNyQ1UsT0FBTztRQUNMTixNQUFNQztRQUNOTSxVQUFVO1lBQ1JDLFdBQVc7Z0JBQ1QsT0FBTyxJQUFJLENBQUNDLFFBQVEsS0FBSyxTQUFVLElBQUksQ0FBQ0gsS0FBSyxJQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDSSxNQUFNLEdBQUc7WUFDdkU7WUFDQUMsU0FBUztRQUNYO1FBQ0FDLE1BQU07SUFDUjtJQUNBQyxTQUFTO1FBQ1BiLE1BQU1DO1FBQ05DLFVBQVU7UUFDVlUsTUFBTTtJQUNSO0lBQ0FFLFFBQVE7UUFDTmQsTUFBTUosd0RBQWUsQ0FBQ21CLEtBQUssQ0FBQ0MsUUFBUTtRQUNwQ0MsS0FBSztRQUNMZixVQUFVO0lBQ1o7SUFDQWdCLFFBQVE7UUFDTmxCLE1BQU07WUFBQ0g7U0FBdUI7UUFDOUJVLFVBQVU7WUFDUkMsV0FBVztnQkFDVCxPQUFPLElBQUksQ0FBQ0MsUUFBUSxLQUFLLFNBQVUsSUFBSSxDQUFDUyxNQUFNLElBQUksSUFBSSxDQUFDQSxNQUFNLENBQUNSLE1BQU0sR0FBRyxLQUFLLElBQUksQ0FBQ1EsTUFBTSxDQUFDUixNQUFNLElBQUc7WUFDbkc7WUFDQUMsU0FBUztRQUNYO0lBQ0Y7SUFDQVEsaUJBQWlCO1FBQ2ZuQixNQUFNO1lBQUNDO1NBQU87UUFDZEcsU0FBUyxFQUFFO1FBQ1hHLFVBQVU7WUFDUkMsV0FBVyxTQUFVWSxLQUFLO2dCQUN4QixPQUNFLElBQUksQ0FBQ1gsUUFBUSxLQUFLLGVBQ2pCVyxNQUFNVixNQUFNLElBQUksRUFBRyxzQ0FBc0M7O1lBRTlEO1lBQ0FDLFNBQVM7UUFDWDtJQUNGO0lBQ0FVLE1BQU07UUFDSnJCLE1BQU07WUFBQ0M7U0FBTztRQUNkRyxTQUFTLEVBQUU7UUFDWEcsVUFBVTtZQUNSQyxXQUFXLFNBQVVZLEtBQUs7Z0JBQ3hCLE9BQ0UsSUFBSSxDQUFDWCxRQUFRLEtBQUssZUFDakJXLE1BQU1WLE1BQU0sSUFBSTtZQUVyQjtZQUNBQyxTQUFTO1FBQ1g7SUFDRjtJQUNBVyxPQUFPO1FBQ0x0QixNQUFNdUI7UUFDTm5CLFNBQVM7SUFDWDtJQUNBSyxVQUFVO1FBQ1JULE1BQU1DO1FBQ051QixNQUFNO1lBQUM7WUFBTztTQUFZO1FBQzFCdEIsVUFBVTtJQUNaO0lBQ0F1QixXQUFXO1FBQ1R6QixNQUFNMEI7UUFDTnRCLFNBQVNzQixLQUFLQyxHQUFHO0lBQ25CO0lBQ0FDLGFBQWE7UUFDWDVCLE1BQU0wQjtRQUNOdEIsU0FBUztJQUNYO0lBQ0F5QixPQUFPO1FBQ0w7WUFDRWYsUUFBUWxCLHdEQUFlLENBQUNtQixLQUFLLENBQUNDLFFBQVE7WUFDdENjLFFBQVE3QjtZQUNSOEIsV0FBVztnQkFBRS9CLE1BQU0wQjtnQkFBTXRCLFNBQVNzQixLQUFLQyxHQUFHO1lBQUM7UUFDN0M7S0FDRDtJQUNESyxVQUFVO1FBQ1JoQyxNQUFLaUM7UUFDTDdCLFNBQVM7SUFDWDtBQUNGO0FBRUEsd0JBQXdCO0FBQ3hCLE1BQU04QixPQUFPdEMsd0RBQWUsQ0FBQ3NDLElBQUksSUFBSXRDLHFEQUFjLENBQUMsUUFBUVM7QUFFNUQsaUVBQWU2QixJQUFJQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2FsbGVyeTIxLXdlYi1hcHAtMi4wLy4vbW9kZWxzL1Bvc3QuanM/NDZiNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtb2RlbHMvUG9zdC5qc1xyXG5cclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcclxuXHJcbmNvbnN0IEltYWdlRGVzY3JpcHRpb25TY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcclxuICBzcmM6IHtcclxuICAgIHR5cGU6IFN0cmluZyxcclxuICAgIHJlcXVpcmVkOiB0cnVlLCAvLyBVUkwgdG8gdGhlIGltYWdlXHJcbiAgfSxcclxuICBkZXNjcmlwdGlvbjoge1xyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgZGVmYXVsdDogJycsIC8vIERlc2NyaXB0aW9uIGZvciB0aGUgaW1hZ2VcclxuICB9LFxyXG59KTtcclxuXHJcbmNvbnN0IFBvc3RTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcclxuICB0aXRsZToge1xyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgdmFsaWRhdGU6IHtcclxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdFR5cGUgIT09ICdhcnQnIHx8ICh0aGlzLnRpdGxlICYmIHRoaXMudGl0bGUubGVuZ3RoID4gMCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIG1lc3NhZ2U6ICdUaXRsZSBpcyByZXF1aXJlZCBmb3IgYXJ0IHBvc3RzLicsXHJcbiAgICB9LFxyXG4gICAgdHJpbTogdHJ1ZSxcclxuICB9LFxyXG4gIGNvbnRlbnQ6IHtcclxuICAgIHR5cGU6IFN0cmluZyxcclxuICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgdHJpbTogdHJ1ZSxcclxuICB9LFxyXG4gIHVzZXJJZDoge1xyXG4gICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgcmVmOiAnVXNlcicsXHJcbiAgICByZXF1aXJlZDogdHJ1ZSxcclxuICB9LFxyXG4gIGltYWdlczoge1xyXG4gICAgdHlwZTogW0ltYWdlRGVzY3JpcHRpb25TY2hlbWFdLFxyXG4gICAgdmFsaWRhdGU6IHtcclxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdFR5cGUgIT09ICdhcnQnIHx8ICh0aGlzLmltYWdlcyAmJiB0aGlzLmltYWdlcy5sZW5ndGggPiAwICYmIHRoaXMuaW1hZ2VzLmxlbmd0aCA8PTYpO1xyXG4gICAgICB9LFxyXG4gICAgICBtZXNzYWdlOiAnSW1hZ2VzIGFyZSByZXF1aXJlZCBmb3IgYXJ0IHBvc3RzIGFuZCBjYW4gbm90IGV4Y2VlZCA2IGltYWdlcy4nLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIGNvbW11bml0eUltYWdlczoge1xyXG4gICAgdHlwZTogW1N0cmluZ10sXHJcbiAgICBkZWZhdWx0OiBbXSxcclxuICAgIHZhbGlkYXRlOiB7XHJcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgIHRoaXMucG9zdFR5cGUgIT09ICdjb21tdW5pdHknIHx8IFxyXG4gICAgICAgICAgKHZhbHVlLmxlbmd0aCA8PSA0KSAvLyBBbGxvdyBlbXB0eSBhcnJheSBvciB1cCB0byA0IGltYWdlc1xyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIG1lc3NhZ2U6ICdJZiBjb21tdW5pdHkgaW1hZ2VzIGFyZSBwcm92aWRlZCwgdGhleSBjYW5ub3QgZXhjZWVkIDQgaW1hZ2VzLicsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgZ2lmczoge1xyXG4gICAgdHlwZTogW1N0cmluZ10sXHJcbiAgICBkZWZhdWx0OiBbXSxcclxuICAgIHZhbGlkYXRlOiB7XHJcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgIHRoaXMucG9zdFR5cGUgIT09ICdjb21tdW5pdHknIHx8IFxyXG4gICAgICAgICAgKHZhbHVlLmxlbmd0aCA8PSAzKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIG1lc3NhZ2U6ICdJZiBjb21tdW5pdHkgR0lGcyBhcmUgcHJvdmlkZWQsIHRoZXkgY2Fubm90IGV4Y2VlZCAzIEdJRnMuJyxcclxuICAgIH0sXHJcbiAgfSxcclxuICBsaWtlczoge1xyXG4gICAgdHlwZTogTnVtYmVyLFxyXG4gICAgZGVmYXVsdDogMCxcclxuICB9LFxyXG4gIHBvc3RUeXBlOiB7XHJcbiAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICBlbnVtOiBbJ2FydCcsICdjb21tdW5pdHknXSxcclxuICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gIH0sXHJcbiAgY3JlYXRlZEF0OiB7XHJcbiAgICB0eXBlOiBEYXRlLFxyXG4gICAgZGVmYXVsdDogRGF0ZS5ub3csXHJcbiAgfSxcclxuICBsYXN0VXBkYXRlZDogeyBcclxuICAgIHR5cGU6IERhdGUsIFxyXG4gICAgZGVmYXVsdDogbnVsbCxcclxuICB9LFxyXG4gIGZsYWdzOiBbXHJcbiAgICB7XHJcbiAgICAgIHVzZXJJZDogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLCAvLyBVc2VyIHdobyBmbGFnZ2VkXHJcbiAgICAgIHJlYXNvbjogU3RyaW5nLCAgICAgICAgICAgICAgICAgICAgICAgIC8vICByZWFzb25cclxuICAgICAgZmxhZ2dlZEF0OiB7IHR5cGU6IERhdGUsIGRlZmF1bHQ6IERhdGUubm93IH0sIC8vIFRpbWVzdGFtcFxyXG4gICAgfSxcclxuICBdLFxyXG4gIGlzUGlubmVkOiB7XHJcbiAgICB0eXBlOkJvb2xlYW4sXHJcbiAgICBkZWZhdWx0OiBmYWxzZSxcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gQ3JlYXRlIHRoZSBQb3N0IG1vZGVsXHJcbmNvbnN0IFBvc3QgPSBtb25nb29zZS5tb2RlbHMuUG9zdCB8fCBtb25nb29zZS5tb2RlbCgnUG9zdCcsIFBvc3RTY2hlbWEpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9zdDtcclxuIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwiSW1hZ2VEZXNjcmlwdGlvblNjaGVtYSIsIlNjaGVtYSIsInNyYyIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImRlc2NyaXB0aW9uIiwiZGVmYXVsdCIsIlBvc3RTY2hlbWEiLCJ0aXRsZSIsInZhbGlkYXRlIiwidmFsaWRhdG9yIiwicG9zdFR5cGUiLCJsZW5ndGgiLCJtZXNzYWdlIiwidHJpbSIsImNvbnRlbnQiLCJ1c2VySWQiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwiaW1hZ2VzIiwiY29tbXVuaXR5SW1hZ2VzIiwidmFsdWUiLCJnaWZzIiwibGlrZXMiLCJOdW1iZXIiLCJlbnVtIiwiY3JlYXRlZEF0IiwiRGF0ZSIsIm5vdyIsImxhc3RVcGRhdGVkIiwiZmxhZ3MiLCJyZWFzb24iLCJmbGFnZ2VkQXQiLCJpc1Bpbm5lZCIsIkJvb2xlYW4iLCJQb3N0IiwibW9kZWxzIiwibW9kZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./models/Post.js\n");

/***/ }),

/***/ "(rsc)/./utils/cloudinary.js":
/*!*****************************!*\
  !*** ./utils/cloudinary.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uploadToCloudinary: () => (/* binding */ uploadToCloudinary)\n/* harmony export */ });\n/* harmony import */ var cloudinary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cloudinary */ \"(rsc)/./node_modules/cloudinary/cloudinary.js\");\n/* harmony import */ var cloudinary__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cloudinary__WEBPACK_IMPORTED_MODULE_0__);\n\n// Configure Cloudinary\ncloudinary__WEBPACK_IMPORTED_MODULE_0__.v2.config({\n    cloud_name: \"drkeu5mc3\",\n    api_key: process.env.CLOUDINARY_API_KEY,\n    api_secret: process.env.CLOUDINARY_API_SECRET\n});\n/**\r\n * Uploads an image to Cloudinary.\r\n * @param {Buffer} buffer - The image file as a Buffer.\r\n * @param {Object} options - Additional options for Cloudinary.\r\n * @param {string} options.folder - Folder to organize uploads in Cloudinary.\r\n * @param {string} [options.publicId] - Optional public ID for the uploaded file.\r\n * @returns {Promise<Object>} - The Cloudinary upload result.\r\n */ const uploadToCloudinary = async (buffer, { folder, publicId, timeout = 6000 })=>{\n    return new Promise((resolve, reject)=>{\n        const uploadStream = cloudinary__WEBPACK_IMPORTED_MODULE_0__.v2.uploader.upload_stream({\n            folder,\n            public_id: publicId,\n            resource_type: \"image\",\n            timeout\n        }, (error, result)=>{\n            if (error) {\n                reject(error);\n            } else {\n                resolve(result);\n            }\n        });\n        uploadStream.end(buffer); // Write the buffer to the upload stream\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi91dGlscy9jbG91ZGluYXJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUU5Qyx1QkFBdUI7QUFDdkJDLDBDQUFVQSxDQUFDQyxNQUFNLENBQUM7SUFDaEJDLFlBQVlDLFdBQTZDO0lBQ3pERyxTQUFTSCxRQUFRQyxHQUFHLENBQUNHLGtCQUFrQjtJQUN2Q0MsWUFBWUwsUUFBUUMsR0FBRyxDQUFDSyxxQkFBcUI7QUFDL0M7QUFFQTs7Ozs7OztDQU9DLEdBQ00sTUFBTUMscUJBQXFCLE9BQU9DLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFVBQVEsSUFBSSxFQUFFO0lBQ2pGLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztRQUMzQixNQUFNQyxlQUFlbEIsMENBQVVBLENBQUNtQixRQUFRLENBQUNDLGFBQWEsQ0FDcEQ7WUFDRVI7WUFDQVMsV0FBV1I7WUFDWFMsZUFBZTtZQUNmUjtRQUNGLEdBQ0EsQ0FBQ1MsT0FBT0M7WUFDTixJQUFJRCxPQUFPO2dCQUNUTixPQUFPTTtZQUNULE9BQU87Z0JBQ0xQLFFBQVFRO1lBQ1Y7UUFDRjtRQUdGTixhQUFhTyxHQUFHLENBQUNkLFNBQVMsd0NBQXdDO0lBQ3BFO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2dhbGxlcnkyMS13ZWItYXBwLTIuMC8uL3V0aWxzL2Nsb3VkaW5hcnkuanM/OGUzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2MiBhcyBjbG91ZGluYXJ5IH0gZnJvbSBcImNsb3VkaW5hcnlcIjtcclxuXHJcbi8vIENvbmZpZ3VyZSBDbG91ZGluYXJ5XHJcbmNsb3VkaW5hcnkuY29uZmlnKHtcclxuICBjbG91ZF9uYW1lOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTE9VRElOQVJZX0NMT1VEX05BTUUsXHJcbiAgYXBpX2tleTogcHJvY2Vzcy5lbnYuQ0xPVURJTkFSWV9BUElfS0VZLFxyXG4gIGFwaV9zZWNyZXQ6IHByb2Nlc3MuZW52LkNMT1VESU5BUllfQVBJX1NFQ1JFVCxcclxufSk7XHJcblxyXG4vKipcclxuICogVXBsb2FkcyBhbiBpbWFnZSB0byBDbG91ZGluYXJ5LlxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIC0gVGhlIGltYWdlIGZpbGUgYXMgYSBCdWZmZXIuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciBDbG91ZGluYXJ5LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5mb2xkZXIgLSBGb2xkZXIgdG8gb3JnYW5pemUgdXBsb2FkcyBpbiBDbG91ZGluYXJ5LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucHVibGljSWRdIC0gT3B0aW9uYWwgcHVibGljIElEIGZvciB0aGUgdXBsb2FkZWQgZmlsZS5cclxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gLSBUaGUgQ2xvdWRpbmFyeSB1cGxvYWQgcmVzdWx0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHVwbG9hZFRvQ2xvdWRpbmFyeSA9IGFzeW5jIChidWZmZXIsIHsgZm9sZGVyLCBwdWJsaWNJZCwgdGltZW91dD02MDAwIH0pID0+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgY29uc3QgdXBsb2FkU3RyZWFtID0gY2xvdWRpbmFyeS51cGxvYWRlci51cGxvYWRfc3RyZWFtKFxyXG4gICAgICB7XHJcbiAgICAgICAgZm9sZGVyLCAvLyBPcmdhbml6ZSB1cGxvYWRzIGluIGEgc3BlY2lmaWMgZm9sZGVyXHJcbiAgICAgICAgcHVibGljX2lkOiBwdWJsaWNJZCwgLy8gT3B0aW9uYWwgY3VzdG9tIHB1YmxpYyBJRFxyXG4gICAgICAgIHJlc291cmNlX3R5cGU6IFwiaW1hZ2VcIiwgLy8gU3BlY2lmeSB0aGF0IHdlJ3JlIHVwbG9hZGluZyBhbiBpbWFnZVxyXG4gICAgICAgIHRpbWVvdXQsXHJcbiAgICAgIH0sXHJcbiAgICAgIChlcnJvciwgcmVzdWx0KSA9PiB7XHJcbiAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHVwbG9hZFN0cmVhbS5lbmQoYnVmZmVyKTsgLy8gV3JpdGUgdGhlIGJ1ZmZlciB0byB0aGUgdXBsb2FkIHN0cmVhbVxyXG4gIH0pO1xyXG59O1xyXG4iXSwibmFtZXMiOlsidjIiLCJjbG91ZGluYXJ5IiwiY29uZmlnIiwiY2xvdWRfbmFtZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19DTE9VRElOQVJZX0NMT1VEX05BTUUiLCJhcGlfa2V5IiwiQ0xPVURJTkFSWV9BUElfS0VZIiwiYXBpX3NlY3JldCIsIkNMT1VESU5BUllfQVBJX1NFQ1JFVCIsInVwbG9hZFRvQ2xvdWRpbmFyeSIsImJ1ZmZlciIsImZvbGRlciIsInB1YmxpY0lkIiwidGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidXBsb2FkU3RyZWFtIiwidXBsb2FkZXIiLCJ1cGxvYWRfc3RyZWFtIiwicHVibGljX2lkIiwicmVzb3VyY2VfdHlwZSIsImVycm9yIiwicmVzdWx0IiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./utils/cloudinary.js\n");

/***/ }),

/***/ "(rsc)/./utils/database.js":
/*!***************************!*\
  !*** ./utils/database.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectToDB: () => (/* binding */ connectToDB)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n// @utils/database.js\n\nlet isConnected = false;\nconst connectToDB = async ()=>{\n    mongoose__WEBPACK_IMPORTED_MODULE_0___default().set(\"strictQuery\", true);\n    if (isConnected) {\n        console.log(\"MongoDB is already connected\");\n        return (mongoose__WEBPACK_IMPORTED_MODULE_0___default().connection);\n    }\n    try {\n        const connection = await mongoose__WEBPACK_IMPORTED_MODULE_0___default().connect(process.env.MONGODB_URL);\n        isConnected = true;\n        console.log(\"MongoDB connected\");\n        return connection.connection;\n    } catch (error) {\n        console.error(\"Error connecting to MongoDB:\", error);\n        throw new Error(\"Failed to connect to MongoDB\");\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi91dGlscy9kYXRhYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxQkFBcUI7QUFFVztBQUVoQyxJQUFJQyxjQUFjO0FBRWxCLE1BQU1DLGNBQWM7SUFDbEJGLG1EQUFZLENBQUMsZUFBZTtJQUU1QixJQUFJQyxhQUFhO1FBQ2ZHLFFBQVFDLEdBQUcsQ0FBQztRQUNaLE9BQU9MLDREQUFtQjtJQUM1QjtJQUVBLElBQUk7UUFDRixNQUFNTSxhQUFhLE1BQU1OLHVEQUFnQixDQUFDUSxRQUFRQyxHQUFHLENBQUNDLFdBQVc7UUFFakVULGNBQWM7UUFDZEcsUUFBUUMsR0FBRyxDQUFDO1FBRVosT0FBT0MsV0FBV0EsVUFBVTtJQUM5QixFQUFFLE9BQU9LLE9BQU87UUFDZFAsUUFBUU8sS0FBSyxDQUFDLGdDQUFnQ0E7UUFDOUMsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0FBQ0Y7QUFFdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nYWxsZXJ5MjEtd2ViLWFwcC0yLjAvLi91dGlscy9kYXRhYmFzZS5qcz8yYjllIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB1dGlscy9kYXRhYmFzZS5qc1xyXG5cclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcclxuXHJcbmxldCBpc0Nvbm5lY3RlZCA9IGZhbHNlOyBcclxuXHJcbmNvbnN0IGNvbm5lY3RUb0RCID0gYXN5bmMgKCkgPT4ge1xyXG4gIG1vbmdvb3NlLnNldCgnc3RyaWN0UXVlcnknLCB0cnVlKTtcclxuXHJcbiAgaWYgKGlzQ29ubmVjdGVkKSB7XHJcbiAgICBjb25zb2xlLmxvZygnTW9uZ29EQiBpcyBhbHJlYWR5IGNvbm5lY3RlZCcpO1xyXG4gICAgcmV0dXJuIG1vbmdvb3NlLmNvbm5lY3Rpb247XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgY29ubmVjdGlvbiA9IGF3YWl0IG1vbmdvb3NlLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR09EQl9VUkwpO1xyXG5cclxuICAgIGlzQ29ubmVjdGVkID0gdHJ1ZTtcclxuICAgIGNvbnNvbGUubG9nKCdNb25nb0RCIGNvbm5lY3RlZCcpO1xyXG5cclxuICAgIHJldHVybiBjb25uZWN0aW9uLmNvbm5lY3Rpb247XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNvbm5lY3RpbmcgdG8gTW9uZ29EQjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjb25uZWN0IHRvIE1vbmdvREInKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgeyBjb25uZWN0VG9EQiB9O1xyXG4iXSwibmFtZXMiOlsibW9uZ29vc2UiLCJpc0Nvbm5lY3RlZCIsImNvbm5lY3RUb0RCIiwic2V0IiwiY29uc29sZSIsImxvZyIsImNvbm5lY3Rpb24iLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfVVJMIiwiZXJyb3IiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./utils/database.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry","vendor-chunks/lodash","vendor-chunks/cloudinary","vendor-chunks/q"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute&page=%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fuser%2F%5Bid%5D%2Fposts%2Froute.js&appDir=%2FVolumes%2FMySecureSphere%2FFYP%20Code%2Fgallery21-main%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FMySecureSphere%2FFYP%20Code%2Fgallery21-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();